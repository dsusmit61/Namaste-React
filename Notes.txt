TO build fast,optimized and production ready large scale application is React enough itself? 
No,only React cannot make fast and production ready app.It requires lot of other packages/libraries(bundler) to make optimized,fast,production ready and scalable app.

NPM - NPM is basically a package manager that manages packages.
      NPM is basically a standard repository of all the packages.
      Any package that you need to include in your project you can get it via NPM. All the packages are hosted over there.All the libraries,utilities that you need comes from NPM.

When you use create-react-app to create project it automatically has NPM inside it.So you don't have to configure it.

Configuring NPM in project - npm init

when we initialize npm in our project package.json is created.It is nothing but a json file that includes the configuration(provided during initialization of npm) of npm.

npm manages packages that we install in our project.And it also take care of versions of all those packages.

Our project is dependent on lot of packages.So packages are also called as dependencies.

The one of the most important package in our project is bundler.

When you have normal html,css,js files our whole code needs to be bundled,minified,cached,compressed,cleaned before it can be sent to production.Bundler helps you to do all those things.
Examples of bundler - Webpack,Parcel,Vite.

When we create app using create-react-app, that behind the scenes uses webpack bundler and babel.

All bundlers are same.They do bundling in different way using different algorithms.

How to install parcel package/dependency in our project?
npm install -D parcel

There are two types of dependencies our app can have - 
Normal dependency - Used in both development phase and production phase also. 
Dev dependency - It's required only in development phase.

Parcel is required in development phase, not in production phase, So it is installed as dev dependency.So by using -D flag we tell npm that we want to install this package as a dev dependency, not a normal dependency.

Difference between Caret(^) and Tilde(~)
The Caret(^) allows minor updates of a package.
In other hand The Tilde(~) allows major updates of a package.
It is always safe to use the Caret(^) over the Tilde(~) because sometimes when you have a major upgrade  a lot of things in your app can break.

When we install a package a new file package-lock.json is created.

Difference between package.json and package-lock.json
Package.json does not keep track of exact version of packages.
On the other hand package-lock.json keeps a track of exact version of the package/dependencies that is installed.

When we install any packages in our project node modules is also created.Node modules is a collection of dependencies that contains all the packages/dependencies we install in our project.For example here we install parcell in our project.Node modules contains parcel package.Parcel as a project has its own dependencies.Those dependencies can have their own dependencies and so on.This is known as Transitive dependencies.

In a project how many package.json do we have?
Every package inside node modules has its own package.json.Based on that npm gets to know all the details about their dependencies and install them. 

Should I put node modules to git/production?
No.If you don't want any file to not go into production/git put it in .gitignore file.

Should I put package.json and package-lock.json to git/production?
Yes.Because package.json stores all the information about dependencies we required for the project and package-lock.json contains the exact versions of those dependencies.So even if we don't push node modules in git by using those two files our node modules can be regenerated and those packages get installed.

Whatever you can regenerate don't put it on git.Git is for essential things.

How to install node modules? 
npm install

Building app using parcel - 
npx parcel index.html 
We are executing parcel by this command.
Parcel goes to index.html and build a development build and hosts that development build into localhost:1234

npm used when we install any packages via npm 
npm install package_name

npx used when we try to execute any package.
npx package_name

There are two ways we can add react to our app 
- Adding react using cdn link.(Not a preferred way to add react)
- Adding react package via npm.

Why adding react using cdn link is not preferred way?
Because it is costly operation as we have to make a network call.
And if version changes,url can be changed.

npm i package_Name is same as npm install package_Name

What Parcel does?
- Creates a Dev Build.
- Creates a Local Server.
- Hosts app to the server.
- Automatically refresh pages on save changes.It is known as HMR(Hot Module Replacement)
- Parcel uses File watching algorithm - written in c++.By this Parcel keeps an eye on all the files.As soon as we develops something and change anything to our code Parcel keeps track of all changes.As soon as you do changes it builds it once again using HMR.
- Faster development builds using caching.
Parcel cache is basically caching everything what you do, So that the next builds can be developed faster.
- Image optimization
The most expensive things in web browser is to load images in your page.
- Minification of files
- Bundling
- Compress
Files need to be compressed, so that the size is small,so that we can ship smaller versions of code.It will remove all the white spaces from your code.It will minify and pack all the javascript files and ship it onto production.
- Consistent Hashing
- Code Splitting
- Differential Bundling
Suppose you hosted your app, your app can be opened through internet explorer even older version of internet explorer, can be opened via mobile browsers.Parcel takes care of all of these and provides differentiate bundling to your app.So that your app can be run smoothly on older browsers also.
- Diagonistic and gives  beautiful error display view.
- Good error handling 
- Tree Shaking - remove unused codes.
- Parcel gives you way to host app in https.
- Creates different bundles for dev and production
Production build takes more time than development build.More optimization in production build than dev build.

Parcel itself not doing everything on its own.For minification Parcel is using some of thr libraries.

How to create production build?
npx parcel build index.html

main in package.json is the way to tell npm that it is the entry point of our app.But when we are using parcel to create prod build we are telling index.html is the entry point of our app.So conflict happens.Thats why you will get an error.Remove the main in package.json

When you run the above command parcel will bundle,minify and put all the files into dist folder. 

dist folder contains all the development build files and production build files
Production build is more time taking operation than development build.

Production build is highly optimized which you can push onto production and serve this app to the user.It will be fast,performant and higly optimized.

.parcel-cache,dist can be regenerated.So don't need to put it to github.So they should be put inside .gitignore.